buildscript {
  repositories {
    jcenter()
    maven { url 'https://plugins.gradle.org/m2' }
  }
  dependencies {
    classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.2.2'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
  }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

group='com.codeborne'
archivesBaseName = 'selenide'
version='4.9-SNAPSHOT'

[compileJava, compileTestJava]*.options.collect {options -> options.encoding = 'UTF-8'}
[compileJava, compileTestJava]*.options.collect {options -> options.debug = true}
compileJava.options.debugOptions.debugLevel = "source,lines,vars"
sourceCompatibility = 1.8
targetCompatibility = 1.8

defaultTasks 'check', 'test', 'install'

repositories {
  mavenCentral()
}

configurations {
  provided
  compile.extendsFrom provided
}

dependencies {
  compile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '1.7.2'
  compile('org.apache.httpcomponents:httpcore:4.4.7')
  compile('org.seleniumhq.selenium:selenium-java:3.6.0') {
    exclude group: 'org.seleniumhq.selenium', module: 'selenium-android-driver'
    exclude group: 'org.seleniumhq.selenium', module: 'selenium-iphone-driver'
    exclude group: 'org.seleniumhq.selenium', module: 'selenium-safari-driver'
    exclude group: 'org.webbitserver', module: 'webbit'
    exclude group: 'commons-codec', module: 'commons-codec'
    exclude group: 'cglib', module: 'cglib-nodep'
    exclude group: 'com.google.code.gson', module: 'gson'
    exclude group: 'org.apache.httpcomponents', module: 'httpcore'
    exclude group: 'com.codeborne', module: 'phantomjsdriver'
    exclude group: 'net.sourceforge.htmlunit', module: 'htmlunit'
    exclude group: 'org.seleniumhq.selenium', module: 'htmlunit-driver'
  }
  runtime group: 'com.codeborne', name: 'phantomjsdriver', version: '1.4.3', transitive: false
  compile 'com.google.code.gson:gson:2.8.2'
  compile 'com.google.guava:guava:23.0'
  runtime 'commons-codec:commons-codec:1.10'
  provided group: 'org.seleniumhq.selenium', name: 'htmlunit-driver', version: '2.27', transitive: false
  provided group: 'net.sourceforge.htmlunit', name: 'htmlunit', version: '2.27'
  testRuntime group: 'net.sourceforge.htmlunit', name: 'htmlunit', version: '2.27', transitive: false
  compile('net.lightbody.bmp:browsermob-core:2.1.5')
  testRuntime group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25', transitive: false

  provided 'junit:junit:4.12'
  provided 'org.testng:testng:6.9.10'
  
  testCompile group: 'org.seleniumhq.selenium', name: 'selenium-server', version: '3.6.0', transitive: false
  testCompile 'org.mockito:mockito-core:2.10.0'
  testCompile 'org.seleniumhq.selenium:jetty-repacked:9.4.5.v20170502'
  testCompile 'org.eclipse.jetty:jetty-server:9.4.5.v20170502'
  testCompile 'org.eclipse.jetty:jetty-servlet:9.4.5.v20170502'
  testCompile 'commons-fileupload:commons-fileupload:1.3.3'
  
  testCompile 'com.automation-remarks:video-recorder-core:1.4.1'
  testCompile 'com.automation-remarks:video-recorder-junit:1.4.1'
}

task libsProd(type: Sync) {
  from configurations.compile
  from configurations.runtime
  into "$buildDir/lib-prod"
}

task libsTest(type: Sync) {
  from configurations.testRuntime
  into "$buildDir/lib-test"
}

compileJava.dependsOn libsProd, libsTest

findbugs {
  toolVersion = "3.0.1"
  sourceSets = [sourceSets.main]
  effort = "max"
  reportsDir = file("$project.buildDir/reports/findbugs")
  excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

tasks.withType(FindBugs) {
  reports {
    xml.enabled = true
    html.enabled = false
  }
}

task checkstyleHtmlMain {
  doLast {
    ant.xslt(in: checkstyleMain.reports.xml.destination,
      style: file('config/checkstyle/checkstyle-noframes-sorted.xsl'),
      out: new File(checkstyleMain.reports.xml.destination.parent, 'main.html'))
  }
}

task checkstyleHtmlTest {
  doLast {
    ant.xslt(in: checkstyleTest.reports.xml.destination,
      style: file('config/checkstyle/checkstyle-noframes-sorted.xsl'),
      out: new File(checkstyleTest.reports.xml.destination.parent, 'test.html'))
  }
}

[checkstyleMain, checkstyleTest].each { task ->
    task.logging.setLevel(LogLevel.LIFECYCLE)
}

checkstyleMain.finalizedBy checkstyleHtmlMain
checkstyleTest.finalizedBy checkstyleHtmlTest

jacoco {
  toolVersion = "0.7.9"
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled true
    html.destination file("${buildDir}/reports/jacocoHtml")
  }
  executionData = files(
    file("$project.buildDir/jacoco/test.exec"), 
    file("$project.buildDir/jacoco/htmlunit.exec"),
    file("$project.buildDir/jacoco/chrome.exec")
  )
}

coveralls {
  jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}

tasks.coveralls {
  onlyIf { System.env.'CI' }
}

apply plugin: 'info.solidsoft.pitest'

pitest {
  targetClasses = ["com.codeborne.selenide*"]
  timestampedReports = false
  threads = 4
  outputFormats = ['XML', 'HTML']
  enableDefaultIncrementalAnalysis = true
}

test {
  include 'com/codeborne/selenide/**/*'
}

task ie(type: Test) {
  systemProperties['selenide.browser'] = 'ie'
  systemProperties['selenide.timeout'] = '8000'
  include 'integration/**/*'
  exclude '**/AlertText.*'
  exclude '**/ConfirmTest.*'
  exclude 'com/codeborne/selenide/**/*'
}

task edge(type: Test) {
  systemProperties['selenide.browser'] = 'edge'
  include 'integration/**/*'
  exclude 'com/codeborne/selenide/**/*'
}

task chrome(type: Test) {
  systemProperties['selenide.browser'] = 'chrome'
  include 'integration/**/*'
  exclude 'com/codeborne/selenide/**/*'
}

task safari(type: Test) {
  systemProperties['selenide.browser'] = 'safari'
  include 'integration/**/*'
  exclude 'com/codeborne/selenide/**/*'
}

task htmlunit(type: Test) {
  systemProperties['selenide.browser'] = 'htmlunit'
  include 'integration/**/*'
  exclude 'com/codeborne/selenide/**/*'
}

task phantomjs(type: Test) {
  systemProperties['selenide.browser'] = 'phantomjs'
  include 'integration/**/*'
  exclude 'com/codeborne/selenide/**/*'
}

task firefox(type: Test) {
  systemProperties['selenide.browser'] = 'firefox'
  include 'integration/**/*'
  exclude 'com/codeborne/selenide/**/*'
}

task marionette(type: Test) {
  systemProperties['selenide.browser'] = 'marionette'
  include 'integration/**/*'
  exclude 'com/codeborne/selenide/**/*'
}

task jbrowser(type: Test) {
  systemProperties['selenide.browser'] = 'jbrowser'
  include 'integration/**/*'
  exclude 'com/codeborne/selenide/**/*'
}

task grid(type: Test) {
  include 'grid/**/*'
  exclude 'com/codeborne/selenide/**/*'
}

task testng(type: Test) {
  useTestNG()
  include '**/*'
  systemProperties['selenide.browser'] = 'htmlunit'
}

tasks.withType(Test).all { testTask ->
  testTask.systemProperties['file.encoding'] = 'UTF-8'
  testTask.systemProperties['BUILD_URL'] = System.getenv()['BUILD_URL']
  // testTask.maxParallelForks = 2
  testTask.systemProperties += System.properties
  testTask.jacoco {
    enabled = true
    includes = ['com/codeborne/selenide/**/*']
  }
  testTask.outputs.upToDateWhen { false }
}

task allTests(dependsOn: ['clean', 'test', 'chrome', 'htmlunit', 'phantomjs']) {}

jar {
  manifest {
    attributes(
      "Implementation-Title": project.group + '.' + project.name,
      "Implementation-Version": version,
      "Implementation-Vendor": "Codeborne")
  }
}

task sourcesJar(type: Jar, dependsOn:classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

javadoc {
  failOnError=false
}

task javadocJar(type: Jar, dependsOn:javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.2.1'
  jarFile = './gradle-wrapper/gradle-wrapper.jar'
  scriptFile = './gradle'
}
